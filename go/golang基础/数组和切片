## 数组

### 数组基本概念

```go
type Currency int
const (
USD Currency = iota // 美元
EUR // 欧元
GBP // 英镑
RMB // 人民币
)
symbol := [...]string{ EUR: "€", GBP: "￡", RMB: "￥", USD: "$"}
fmt.Println(RMB, symbol[RMB]) // "3 ￥"
```

在这种形式的数组字面值形式中，初始化索引的顺序是无关紧要的，而且没用到的索引可以省略，未指定初始值的元素将用零值初始化。例如，

```go
r := [...]int{99: -1}
```

如果一个数组的元素类型是可以相互比较的，那么数组类型也是可以相互比较的，这时候我们可以直接通过 `==` 比较运算符来比较两个数组，只有当两个数组的所有元素都是相等的时候数组才是相等的。不相等比较运算符`!=`遵循同样的规则。

```go
a := [2]int{1, 2}

b := [...]int{1, 2}

c := [2]int{1, 3}

fmt.Println(a == b, a == c, b == c) // "true false false"

d := [3]int{1, 2}

fmt.Println(a == d) // compile error: cannot compare [2]int == [3]int
```

当调用一个函数的时候，函数的每个调用参数将会被赋值给函数内部的参数变量，所以函数参数变量接收的是一个复制的副本，并不是原始调用的变量。因为函数参数传递的机制导致传递大的数组类型将是低效的，并且对数组参数的任何的修改都是发生在复制的数组上，并不能直接修改调用时原始的数组变量。

> 所以给函数传数组并进行改变其内部值，改变的只是数组的copy不会改变原数组

在这个方面，*Go*语言对待数组的方式和其它很多编程语言不同，其它编程语言可能会隐式地将数组作为引用或指针对象传入被调用的函数。当然，我们可以显式地传入一个数组指针，那样的话函数通过指针对数组的任何修改都可以直接反馈到调用者。下面的函数用于给*[32]byte*类型的数组清零：

```go
func zero(ptr *[32]byte) {
	for i := range ptr {
			ptr[i] = 0
	}
}
```

优化：

```go
func zero(ptr *[32]byte) {
	*ptr = [32]byte{}
}


func main() {
	ptr := [32]byte{}
	ptr[1]='a'
	fmt.Printf("%p,\n",&ptr)    
	zero(&ptr)
	fmt.Printf("%p,\n",&ptr)  //和上面打印的地址是相同的，且都被初始化为0
	fmt.Println(ptr[1])
}
```

> *byte*和*rune*的零值都为0，因为他们底层为int8和*int32*





## 切片

### 切片基本概念

```go
months := [...]string{1: "January", /* ... */, 12: "December"}
Q2 := months[4:7]
summer := months[6:9]
fmt.Println(Q2) // ["April" "May" "June"]
fmt.Println(summer) // ["June" "July" "August"]
```

切片append的时候如果cap不够则会分配一个新的底层数组。

> 切片的容量取决于底层数组的容量，从取**切片的初始值开始到底层数组的尾部**，这一部分的长度为切片的容量

### 地址

```go
func main() {
	months := []string{1: "January"}
	fmt.Printf("%p,\n",&months)				//0xc0000ae040,
  fmt.Printf("%p,\n",months)				//0xc0000ae060,
	fmt.Printf("%p,\n",&months[0])		//0xc0000ae060,
}
```



> 扩展：结构体的地址
>
> ```go
> type stu struct{
> 	name string
> }
> 
> func main() {
> 	var s stu
> 	fmt.Printf("%p,\n",&s)
> 	fmt.Printf("%p,\n",&s.name) //打印的地址是相同的
> }
> ```
>
> 那么这里第一个打印函数打印的是什么地址呢？如果指向的是切片的结构体`SliceHeader`，但是
>
> ```go
> type SliceHeader struct {
> 	Data uintptr
> 	Len  int
> 	Cap  int
> }
> ```
>
> 结构体的地址是与第一个成员变量的地址相同的，而这个`Data`就是底层数组且是第一个成员变量，那为什么会与二三个打印函数结果不同呢？
>
> > 针对这个问题我在V2ex发了个帖子 [golang 切片地址问题](https://www.v2ex.com/t/728365#reply7)
>
> 我们需要知道的是指针变量也是需要一个地址来存储的。
>
> ```go
> //months 是一个指针变量，存一个地址，指向这个切片。
> 
> //这个指针变量同样需要一个内存地址来存储。
> 
> int *p;
> 
> int a = 5;
> 
> p = &a;
> 
> //p 存了 a 的地址，但 p 本身也需要一个内存地址来存储。
> 
> //把 p 理解成一个 cpu 字长大小的整形变量，他存了一个整形地址。所以它也需要一个内存地址。
> ```
>
> 上面三个打印函数等价于
>
> ```go
> 	header := (*reflect.SliceHeader)(unsafe.Pointer(&months))
> 	fmt.Printf("%p, \n",header)
> 	fmt.Printf("0x%x,\n", header.Data)
> 	fmt.Printf("0x%x,\n", header.Data+0)
> ```
>
> 另外由于第一个成员变量为指针，所以结构体的地址为存储第一个成员变量（指针）的地址，而不是成员变量这个指针。
>
> ```go
> 	fmt.Printf("%x, \n",*header)
> ```



### 引用类型

切片，管道和哈希表都为引用类型

> C++中的引用和指针：
>
> 引用很容易与指针混淆，它们之间有三个主要的不同：
>
> - 不存在空引用。引用必须连接到一块合法的内存。
> - 一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。
> - 引用必须在创建时被初始化。指针可以在任何时间被初始化。

我们需要知道的是*golang*虽然有引用类型但是没有引用传递，只有值传递。

来看看官方的说法：

> There's a lot of history on that topic. Early on, maps and channels were syntactically pointers and it was impossible to declare or use a non-pointer instance. Also, we struggled with how arrays should work. Eventually we decided that the strict separation of pointers and values made the language harder to use. **Changing these types to act as references to the associated, shared data structures resolved these issues**. This change added some regrettable complexity to the language but had a large effect on usability: Go became a more productive, comfortable language when it was introduced.

大概意思是说：最开始用的是指针语法，由于种种原因改成了引用，但是这个引用与C++的引用是不同的，它是共享关联数据的结构。也就是我们之前说的共享底层数据，切片的底层为其实为数组。
